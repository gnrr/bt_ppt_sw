
ppt_sw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000002ca  0000035e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006c  0080006c  0000036a  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000ab7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000048  00000000  00000000  00000ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000225  00000000  00000000  00000b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000013b  00000000  00000000  00000d53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001a5  00000000  00000000  00000e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000d4  00000000  00000000  00001034  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000123  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001a1  00000000  00000000  0000122b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000038  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ea ec       	ldi	r30, 0xCA	; 202
  36:	f2 e0       	ldi	r31, 0x02	; 2
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_L__+0x1>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	ac 36       	cpi	r26, 0x6C	; 108
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	ac e6       	ldi	r26, 0x6C	; 108
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	af 36       	cpi	r26, 0x6F	; 111
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	09 d1       	rcall	.+530    	; 0x268 <main>
  56:	37 c1       	rjmp	.+622    	; 0x2c6 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <is_pressed_forward>:
#define SW_TYPE_B     1             // normal close
u1 sw_type_back;                    // SW_TYPE_A: BERETTA
                                    // SW_TYPE_B: SIG, GLOCK

bool is_pressed_forward(void)
{
  5a:	cf 93       	push	r28
  5c:	df 93       	push	r29
  5e:	cd b7       	in	r28, 0x3d	; 61
  60:	dd 27       	eor	r29, r29
  62:	c3 50       	subi	r28, 0x03	; 3
  64:	cd bf       	out	0x3d, r28	; 61
    u1 *pks = &keystate[KS_FORWARD];
  66:	8c e6       	ldi	r24, 0x6C	; 108
  68:	90 e0       	ldi	r25, 0x00	; 0
  6a:	9a 83       	std	Y+2, r25	; 0x02
  6c:	89 83       	std	Y+1, r24	; 0x01
    u1 k = (PINB & (1<<PINB0))? FALSE:TRUE;
  6e:	86 e3       	ldi	r24, 0x36	; 54
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	fc 01       	movw	r30, r24
  74:	80 81       	ld	r24, Z
  76:	88 2f       	mov	r24, r24
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	81 70       	andi	r24, 0x01	; 1
  7c:	99 27       	eor	r25, r25
  7e:	21 e0       	ldi	r18, 0x01	; 1
  80:	00 97       	sbiw	r24, 0x00	; 0
  82:	09 f0       	breq	.+2      	; 0x86 <is_pressed_forward+0x2c>
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	2b 83       	std	Y+3, r18	; 0x03
    if((k == TRUE) && (*pks == 0))
  88:	8b 81       	ldd	r24, Y+3	; 0x03
  8a:	81 30       	cpi	r24, 0x01	; 1
  8c:	61 f4       	brne	.+24     	; 0xa6 <is_pressed_forward+0x4c>
  8e:	89 81       	ldd	r24, Y+1	; 0x01
  90:	9a 81       	ldd	r25, Y+2	; 0x02
  92:	fc 01       	movw	r30, r24
  94:	80 81       	ld	r24, Z
  96:	88 23       	and	r24, r24
  98:	31 f4       	brne	.+12     	; 0xa6 <is_pressed_forward+0x4c>
		*pks = 1;
  9a:	89 81       	ldd	r24, Y+1	; 0x01
  9c:	9a 81       	ldd	r25, Y+2	; 0x02
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	fc 01       	movw	r30, r24
  a2:	20 83       	st	Z, r18
  a4:	0e c0       	rjmp	.+28     	; 0xc2 <is_pressed_forward+0x68>
    else if((k == FALSE) && (*pks == 1))
  a6:	8b 81       	ldd	r24, Y+3	; 0x03
  a8:	88 23       	and	r24, r24
  aa:	59 f4       	brne	.+22     	; 0xc2 <is_pressed_forward+0x68>
  ac:	89 81       	ldd	r24, Y+1	; 0x01
  ae:	9a 81       	ldd	r25, Y+2	; 0x02
  b0:	fc 01       	movw	r30, r24
  b2:	80 81       	ld	r24, Z
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	29 f4       	brne	.+10     	; 0xc2 <is_pressed_forward+0x68>
		*pks = 2;
  b8:	89 81       	ldd	r24, Y+1	; 0x01
  ba:	9a 81       	ldd	r25, Y+2	; 0x02
  bc:	22 e0       	ldi	r18, 0x02	; 2
  be:	fc 01       	movw	r30, r24
  c0:	20 83       	st	Z, r18

    return (*pks == 2);
  c2:	89 81       	ldd	r24, Y+1	; 0x01
  c4:	9a 81       	ldd	r25, Y+2	; 0x02
  c6:	fc 01       	movw	r30, r24
  c8:	90 81       	ld	r25, Z
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	92 30       	cpi	r25, 0x02	; 2
  ce:	09 f0       	breq	.+2      	; 0xd2 <is_pressed_forward+0x78>
  d0:	80 e0       	ldi	r24, 0x00	; 0
}
  d2:	cd 5f       	subi	r28, 0xFD	; 253
  d4:	cd bf       	out	0x3d, r28	; 61
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <is_pressed_backward>:

bool is_pressed_backward(void)
{
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	dd 27       	eor	r29, r29
  e4:	c3 50       	subi	r28, 0x03	; 3
  e6:	cd bf       	out	0x3d, r28	; 61
	u1 *pks = &keystate[KS_BACKWARD];
  e8:	8d e6       	ldi	r24, 0x6D	; 109
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	9b 83       	std	Y+3, r25	; 0x03
  ee:	8a 83       	std	Y+2, r24	; 0x02
    u1 k;

    if(sw_type_back == SW_TYPE_A)
  f0:	80 91 6e 00 	lds	r24, 0x006E
  f4:	88 23       	and	r24, r24
  f6:	71 f4       	brne	.+28     	; 0x114 <__stack+0x35>
        k = (PINB & (1<<PINB1))? FALSE:TRUE;
  f8:	86 e3       	ldi	r24, 0x36	; 54
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	fc 01       	movw	r30, r24
  fe:	80 81       	ld	r24, Z
 100:	88 2f       	mov	r24, r24
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	82 70       	andi	r24, 0x02	; 2
 106:	99 27       	eor	r25, r25
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	00 97       	sbiw	r24, 0x00	; 0
 10c:	09 f0       	breq	.+2      	; 0x110 <__stack+0x31>
 10e:	20 e0       	ldi	r18, 0x00	; 0
 110:	29 83       	std	Y+1, r18	; 0x01
 112:	0d c0       	rjmp	.+26     	; 0x12e <__stack+0x4f>
    else
        k = (PINB & (1<<PINB1))? TRUE:FALSE;
 114:	86 e3       	ldi	r24, 0x36	; 54
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	fc 01       	movw	r30, r24
 11a:	80 81       	ld	r24, Z
 11c:	88 2f       	mov	r24, r24
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	82 70       	andi	r24, 0x02	; 2
 122:	99 27       	eor	r25, r25
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	00 97       	sbiw	r24, 0x00	; 0
 128:	09 f4       	brne	.+2      	; 0x12c <__stack+0x4d>
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	29 83       	std	Y+1, r18	; 0x01

	if((k == TRUE) && (*pks == 0))
 12e:	89 81       	ldd	r24, Y+1	; 0x01
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	61 f4       	brne	.+24     	; 0x14c <__stack+0x6d>
 134:	8a 81       	ldd	r24, Y+2	; 0x02
 136:	9b 81       	ldd	r25, Y+3	; 0x03
 138:	fc 01       	movw	r30, r24
 13a:	80 81       	ld	r24, Z
 13c:	88 23       	and	r24, r24
 13e:	31 f4       	brne	.+12     	; 0x14c <__stack+0x6d>
		*pks = 1;
 140:	8a 81       	ldd	r24, Y+2	; 0x02
 142:	9b 81       	ldd	r25, Y+3	; 0x03
 144:	21 e0       	ldi	r18, 0x01	; 1
 146:	fc 01       	movw	r30, r24
 148:	20 83       	st	Z, r18
 14a:	0e c0       	rjmp	.+28     	; 0x168 <__stack+0x89>
	else if((k == FALSE) && (*pks == 1))
 14c:	89 81       	ldd	r24, Y+1	; 0x01
 14e:	88 23       	and	r24, r24
 150:	59 f4       	brne	.+22     	; 0x168 <__stack+0x89>
 152:	8a 81       	ldd	r24, Y+2	; 0x02
 154:	9b 81       	ldd	r25, Y+3	; 0x03
 156:	fc 01       	movw	r30, r24
 158:	80 81       	ld	r24, Z
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	29 f4       	brne	.+10     	; 0x168 <__stack+0x89>
		*pks = 2;
 15e:	8a 81       	ldd	r24, Y+2	; 0x02
 160:	9b 81       	ldd	r25, Y+3	; 0x03
 162:	22 e0       	ldi	r18, 0x02	; 2
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18

	return (*pks == 2);
 168:	8a 81       	ldd	r24, Y+2	; 0x02
 16a:	9b 81       	ldd	r25, Y+3	; 0x03
 16c:	fc 01       	movw	r30, r24
 16e:	90 81       	ld	r25, Z
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	92 30       	cpi	r25, 0x02	; 2
 174:	09 f0       	breq	.+2      	; 0x178 <__stack+0x99>
 176:	80 e0       	ldi	r24, 0x00	; 0
}
 178:	cd 5f       	subi	r28, 0xFD	; 253
 17a:	cd bf       	out	0x3d, r28	; 61
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <send_byte>:

void send_byte(u1 ch)
{
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	1f 92       	push	r1
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	dd 27       	eor	r29, r29
 18c:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSRA & (1<<UDRE)))	// Wait for empty transmit buffer
 18e:	00 00       	nop
 190:	8b e2       	ldi	r24, 0x2B	; 43
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	fc 01       	movw	r30, r24
 196:	80 81       	ld	r24, Z
 198:	88 2f       	mov	r24, r24
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	80 72       	andi	r24, 0x20	; 32
 19e:	99 27       	eor	r25, r25
 1a0:	00 97       	sbiw	r24, 0x00	; 0
 1a2:	b1 f3       	breq	.-20     	; 0x190 <send_byte+0xe>
		;

	UDR = ch;						// Put data into buffer
 1a4:	8c e2       	ldi	r24, 0x2C	; 44
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	29 81       	ldd	r18, Y+1	; 0x01
 1aa:	fc 01       	movw	r30, r24
 1ac:	20 83       	st	Z, r18
}
 1ae:	0f 90       	pop	r0
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <send_report>:

void send_report(u1 scan_code)
{
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	00 d0       	rcall	.+0      	; 0x1bc <send_report+0x6>
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	dd 27       	eor	r29, r29
 1c0:	8a 83       	std	Y+2, r24	; 0x02
	report[5] = scan_code;
 1c2:	8a 81       	ldd	r24, Y+2	; 0x02
 1c4:	80 93 65 00 	sts	0x0065, r24
	
	for(u1 i=0; i<sizeof(report)/sizeof(u1); i++)
 1c8:	19 82       	std	Y+1, r1	; 0x01
 1ca:	0b c0       	rjmp	.+22     	; 0x1e2 <send_report+0x2c>
        send_byte(report[i]);
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	88 2f       	mov	r24, r24
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	80 5a       	subi	r24, 0xA0	; 160
 1d4:	9f 4f       	sbci	r25, 0xFF	; 255
 1d6:	fc 01       	movw	r30, r24
 1d8:	80 81       	ld	r24, Z
 1da:	d3 df       	rcall	.-90     	; 0x182 <send_byte>

void send_report(u1 scan_code)
{
	report[5] = scan_code;
	
	for(u1 i=0; i<sizeof(report)/sizeof(u1); i++)
 1dc:	89 81       	ldd	r24, Y+1	; 0x01
 1de:	8f 5f       	subi	r24, 0xFF	; 255
 1e0:	89 83       	std	Y+1, r24	; 0x01
 1e2:	89 81       	ldd	r24, Y+1	; 0x01
 1e4:	8b 30       	cpi	r24, 0x0B	; 11
 1e6:	90 f3       	brcs	.-28     	; 0x1cc <send_report+0x16>
        send_byte(report[i]);
}
 1e8:	ce 5f       	subi	r28, 0xFE	; 254
 1ea:	cd bf       	out	0x3d, r28	; 61
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <init>:

void init(void)
{
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	cd b7       	in	r28, 0x3d	; 61
 1f8:	dd 27       	eor	r29, r29
	// sw
	PORTB = (1<<PB1)|(1<<PB0);		// pull up
 1fa:	88 e3       	ldi	r24, 0x38	; 56
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	23 e0       	ldi	r18, 0x03	; 3
 200:	fc 01       	movw	r30, r24
 202:	20 83       	st	Z, r18
    PORTD = (1<<PB5);				// pull up
 204:	82 e3       	ldi	r24, 0x32	; 50
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	20 e2       	ldi	r18, 0x20	; 32
 20a:	fc 01       	movw	r30, r24
 20c:	20 83       	st	Z, r18
	
	// uart
	UCSRA |= 1<<U2X;
 20e:	8b e2       	ldi	r24, 0x2B	; 43
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	2b e2       	ldi	r18, 0x2B	; 43
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	f9 01       	movw	r30, r18
 218:	20 81       	ld	r18, Z
 21a:	22 60       	ori	r18, 0x02	; 2
 21c:	fc 01       	movw	r30, r24
 21e:	20 83       	st	Z, r18
	UBRRH = (u1)(BPS>>8);
 220:	82 e2       	ldi	r24, 0x22	; 34
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	fc 01       	movw	r30, r24
 226:	10 82       	st	Z, r1
	UBRRL = (u1)BPS;
 228:	89 e2       	ldi	r24, 0x29	; 41
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	2c e0       	ldi	r18, 0x0C	; 12
 22e:	fc 01       	movw	r30, r24
 230:	20 83       	st	Z, r18
	UCSRB |= 1<<TXEN;				// Enable transmitter
 232:	8a e2       	ldi	r24, 0x2A	; 42
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	2a e2       	ldi	r18, 0x2A	; 42
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	f9 01       	movw	r30, r18
 23c:	20 81       	ld	r18, Z
 23e:	28 60       	ori	r18, 0x08	; 8
 240:	fc 01       	movw	r30, r24
 242:	20 83       	st	Z, r18
	
	// vars
                                                                 //                            open     short
    sw_type_back = (PIND & (1<<PIND5))? SW_TYPE_B:SW_TYPE_A;     // PD5(PIN#9) -- GND(PIN#10)  TYPE_B   TYPE_A
 244:	80 e3       	ldi	r24, 0x30	; 48
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	fc 01       	movw	r30, r24
 24a:	80 81       	ld	r24, Z
 24c:	88 2f       	mov	r24, r24
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	80 72       	andi	r24, 0x20	; 32
 252:	99 27       	eor	r25, r25
 254:	21 e0       	ldi	r18, 0x01	; 1
 256:	00 97       	sbiw	r24, 0x00	; 0
 258:	09 f4       	brne	.+2      	; 0x25c <init+0x6a>
 25a:	20 e0       	ldi	r18, 0x00	; 0
 25c:	82 2f       	mov	r24, r18
 25e:	80 93 6e 00 	sts	0x006E, r24
}
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <main>:

int main(void)
{
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	00 d0       	rcall	.+0      	; 0x26e <main+0x6>
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	dd 27       	eor	r29, r29
	bool usb_send_press = FALSE;
 272:	19 82       	std	Y+1, r1	; 0x01

	init();
 274:	be df       	rcall	.-132    	; 0x1f2 <init>
 276:	01 c0       	rjmp	.+2      	; 0x27a <main+0x12>
			usb_send_press = FALSE;

			for(u1 i=0;i<sizeof(keystate); i++)
				keystate[i] = 0;
		}
    }
 278:	00 00       	nop

	init();
	
    while(1)
    {
		if(usb_send_press == FALSE) {
 27a:	89 81       	ldd	r24, Y+1	; 0x01
 27c:	88 23       	and	r24, r24
 27e:	81 f4       	brne	.+32     	; 0x2a0 <main+0x38>
			if(is_pressed_forward()) {
 280:	ec de       	rcall	.-552    	; 0x5a <is_pressed_forward>
 282:	88 23       	and	r24, r24
 284:	29 f0       	breq	.+10     	; 0x290 <main+0x28>
				send_report(USID_KBD_PAGE_DOWN);
 286:	8e e4       	ldi	r24, 0x4E	; 78
 288:	96 df       	rcall	.-212    	; 0x1b6 <send_report>
				usb_send_press = TRUE;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	89 83       	std	Y+1, r24	; 0x01
			usb_send_press = FALSE;

			for(u1 i=0;i<sizeof(keystate); i++)
				keystate[i] = 0;
		}
    }
 28e:	f4 cf       	rjmp	.-24     	; 0x278 <main+0x10>
    {
		if(usb_send_press == FALSE) {
			if(is_pressed_forward()) {
				send_report(USID_KBD_PAGE_DOWN);
				usb_send_press = TRUE;
			} else if(is_pressed_backward()) {
 290:	25 df       	rcall	.-438    	; 0xdc <is_pressed_backward>
 292:	88 23       	and	r24, r24
 294:	89 f3       	breq	.-30     	; 0x278 <main+0x10>
				send_report(USID_KBD_PAGE_UP);
 296:	8b e4       	ldi	r24, 0x4B	; 75
 298:	8e df       	rcall	.-228    	; 0x1b6 <send_report>
				usb_send_press = TRUE;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	89 83       	std	Y+1, r24	; 0x01
			usb_send_press = FALSE;

			for(u1 i=0;i<sizeof(keystate); i++)
				keystate[i] = 0;
		}
    }
 29e:	ec cf       	rjmp	.-40     	; 0x278 <main+0x10>
			} else if(is_pressed_backward()) {
				send_report(USID_KBD_PAGE_UP);
				usb_send_press = TRUE;
			}
		} else {
			send_report(0x00);      // released
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	89 df       	rcall	.-238    	; 0x1b6 <send_report>
			usb_send_press = FALSE;
 2a4:	19 82       	std	Y+1, r1	; 0x01

			for(u1 i=0;i<sizeof(keystate); i++)
 2a6:	1a 82       	std	Y+2, r1	; 0x02
 2a8:	0a c0       	rjmp	.+20     	; 0x2be <main+0x56>
				keystate[i] = 0;
 2aa:	8a 81       	ldd	r24, Y+2	; 0x02
 2ac:	88 2f       	mov	r24, r24
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	84 59       	subi	r24, 0x94	; 148
 2b2:	9f 4f       	sbci	r25, 0xFF	; 255
 2b4:	fc 01       	movw	r30, r24
 2b6:	10 82       	st	Z, r1
			}
		} else {
			send_report(0x00);      // released
			usb_send_press = FALSE;

			for(u1 i=0;i<sizeof(keystate); i++)
 2b8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ba:	8f 5f       	subi	r24, 0xFF	; 255
 2bc:	8a 83       	std	Y+2, r24	; 0x02
 2be:	8a 81       	ldd	r24, Y+2	; 0x02
 2c0:	82 30       	cpi	r24, 0x02	; 2
 2c2:	98 f3       	brcs	.-26     	; 0x2aa <main+0x42>
				keystate[i] = 0;
		}
    }
 2c4:	d9 cf       	rjmp	.-78     	; 0x278 <main+0x10>

000002c6 <_exit>:
 2c6:	f8 94       	cli

000002c8 <__stop_program>:
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <__stop_program>
